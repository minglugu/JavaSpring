<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 要设置是实现接口的具体包名加类名, userMapper.xml和UserMapper的interface关联起来，目的是，要实现的接口是谁？-->
<mapper namespace="com.example.demo.mapper.UserMapper">
    <!--resultMap的使用场景：field(e.g. username) in database is not the same as attribute(name) in object
    给id取名，用Upper Camel Case-->
    <resultMap id="BaseMap" type="com.example.demo.model.UserInfo">
        <!--主键映射,要写两个值，column是表里面的field，映射的属性(property)是object里面的属性-->
        <!--这么写id和result是有问题的，单表查询没问题，但是多表查询会有问题，在getUserById中，resultType替换成resultMap
        -->
        <id column="id" property="id"></id>
        <!--普通属性映射, column是数据库里面的字段-->
        <result column="username" property="name"></result>
        <result column="password" property="password"></result>
        <result column="photo" property="photo"></result>
        <result column="createtime" property="createtime"></result>
        <result column="updatetime" property="updatetime"></result>
        <result column="state" property="state"></result>
        <collection property="artList"
                    resultMap="com.example.demo.mapper.ArticleMapper.BaseMap"
                    columnPrefix="a_">
        </collection>
    </resultMap>

    <!--userinfo为主表. 两表还是有相同字段，那么会发生数据覆盖，需要在resultMap里面，加<collection>-->
    <select id="getUserAndArticleByUid" resultMap="BaseMap">
        select u.*, a.id a_id, a.title a_title, a.content a_content, a.createtime a_createtime, a.updatetime a_updatetime
        from userinfo u left join articleinfo a on u.id=a.uid where u.id=#{uid}
    </select>

    <!-- 只是查询操作(不是增删查改操作), select, id是interface里面的方法名，和返回的类型(resultType，包名+类名),要写2个属性(id和resultType)-->
    <!--将resultType改成resultMap-->
    <select id="getUserById" resultMap="BaseMap">
        <!-- 具体的sql query，id=${id} 或者 id=#{id}
            在test里面，传了个null，那么sql生成为
            ==>  Preparing: select * from userinfo
            ==> Parameters:
            表明，当where中的所有参数都为空，那么sql就不会生成有where的这个部分
            -->
        <!-- 在id前面加and，test里面在生成sql语句时，会自动去除，例子如下
            Preparing: select * from userinfo WHERE id=?
            ==> Parameters: 2(Integer)-->
        <!--以下时标准的写法：在三种情境下，都时正确的，
            1. 只传id，那么会去除and 标签
            2. 只穿username，自动去除最后一个and
            3. 同时传，那么时个标准的sql语句-->
        select * from userinfo
        <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="name!=null">
                and username=#{name}
            </if>
        </where>
    </select>

    <!--使用升序或降序来排序，需要用${}parameter notation。#{}是不能实现排序查询的。因为当使用#{}查询时，如果传递的
    值为String（asc/desc），则会加单引号，而asc/desc是关键字，无需引号，这样就会导致SQL 的syntax错误-->
    <select id="getOrderList" resultType="com.example.demo.model.UserInfo">
        select * from userinfo order by createtime ${order}
    </select>

    <!-- 使用${}时，解决非数值类型的报错问题：'${name}',但会出现SQL injection的问题
        SQL注入的example-->
    <select id="isLogin" resultType="com.example.demo.model.UserInfo">
        select * from userinfo where username='${name}' and password='${pwd}'
    </select>

    <!-- 使用like查询，用#{}会报错，但也不能直接使用${}。可以考虑使用mysql的内置函数concat()来处理。
        select * from userinfo where username like '%#{username}%' 在sql里面相当于
        select * from userinfo where username like '%'username'%'
        也不能替换成${},因为会有注入风险-->
    <select id="getListByName" resultType="com.example.demo.model.UserInfo">
        select * from userinfo where username like concat('%',#{username},'%')
    </select>

    <!--使用升序或降序来排序，需要用${}parameter notation。#{}是不能实现排序查询的。因为当使用#{}查询时，如果传递的
        值为String（asc/desc），则会加单引号，而asc/desc是关键字，无需引号，这样就会导致SQL 的syntax错误-->
    <select id="getAllBySort" parameterType="java.lang.String" resultType="com.example.demo.model.UserInfo">
        select * from userinfo order by id ${sort}
    </select>

    <!-- 根据username来查询 name is unique-->
    <select id="getUserByFullName" resultType="com.example.demo.model.UserInfo">
        <!-- 具体的sql query，id=${id} 或者 id=#{id} -->
        select * from userinfo where username=#{username}
    </select>

    <!--根据id，更新已经存在的用户名，update无需加返回值resultType,只需要方法名作为id即可，用#{}-->
    <update id="update">
        update userinfo set username=#{username} where id=#{id}
    </update>

    <!-- 根据id，删除用户-->
    <delete id="delete">
        delete from userinfo where id=#{id}
    </delete>

    <!-- 添加用户，返回受影响的行数-->
    <!-- 拿到的值是object，如果获取里面的属性？直接用对象里面的属性名，注意此参数一定要和对象中的属性名是一致的。mybatis是自动获取-->
    <insert id="add">
        insert into userinfo(username, password, photo)
        values(#{username},#{password},#{photo})
    </insert>

    <!--MyBatis添加用户，返回受影响的行数和自增id
        useGeneratedKeys默认是false，如果要自增，那么设置成true
        然后赋值到对象的哪个属性上
    -->
    <insert id="addGetId" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into userinfo(username, password, photo)
        values(#{username},#{password},#{photo})
    </insert>

    <!--photo有时候有，有时候没有，是非必传参数，需要if来处理。
        在test里面，直接写对象的属性名.
        !=null 拼接
        ==null
        添加用户。添加时，photo是非必穿参数。
        第一个username是字段名
        第二个#{username}是对象里的属性的名字，所以要改成name-->
    <!--1. 当photo传值的时候，生成的sql是
        ==>  Preparing: insert into userinfo(username, password ,photo ) values(?,? ,? )
        ==> Parameters: zhangdan(String), 123(String), 123.png(String)
        <==    Updates: 1
        2. 当photo不传值时，生成的sql是
        ==>  Preparing: insert into userinfo(username, password ) values(?,? )
        ==> Parameters: lisi(String), 654(String)
        -->
    <insert id="add2">
        insert into userinfo(username, password
        <if test="photo!=null">
            ,photo
        </if>
        ) values(#{name},#{password}
        <if test="photo!=null">
            ,#{photo}
        </if>
        )
    </insert>

    <!--之所以要加prefix="(" 和suffix=")" 是因为insert into userinfo(a,b,c) values(#{a}, #{b}, #{c})
        name!=null中name是对象的属性，username(field)是表格中的column name-->
    <insert id="add3">
        insert into userinfo
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="photo != null">
                photo,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name},
            </if>
            <if test="password!=null">
                #{password},
            </if>
            <if test="photo">
                #{photo},
            </if>
        </trim>
    </insert>
</mapper>
<!--和Interface一样的名字，所以叫userMapper -->
<!-- reference URL:
https://mybatis.org/mybatis-3/sqlmap-xml.html#:~:text=select%20The%20select%20statement%20is%20one%20of%20the,update%20or%20delete%2C%20there%20are%20probably%20many%20selects.-->
